// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // use the first bit to identify the instruction
    Mux16(a = instruction, b = outALU, sel = instruction[15], out = outMuxA);
    
    // A-instruction or d1 will load A
    Not(in = instruction[15], out = insA);
    Or(a = instruction[5], b = insA, out = loadA);
    ARegister(in = outMuxA, load = loadA, out = outAMux, out = outAPC, out[0..14] = addressM);
    
    // use a to identify which is the comp
    Mux16(a = outAMux, b = inM, sel = instruction[12], out = outMuxALU);
    
    // C-instruction and d2 will load D
    And(a = instruction[4], b = instruction[15], out = loadD);
    DRegister(in = outALU, load = loadD, out = outDALU);
    
    ALU(x = outDALU, y = outMuxALU,
        zx = instruction[11], nx = instruction[10], zy = instruction[9],
        ny = instruction[8], f = instruction[7], no = instruction[6],
        out = outALU, out = outM, zr = zero, ng = negative);
    
    // true-false table
    And(a = instruction[3], b = instruction[15], out = writeMtemp);
    And(a = true, b = writeMtemp, out = writeM);
    Not(in = zero, out = nzr);
    Not(in = negative, out = nng);
    And(a = instruction[2], b = instruction[1], out = j1Andj2);
    And(a = instruction[2], b = instruction[0], out = j1Andj3);
    And(a = instruction[1], b = instruction[0], out = j2Andj3);
    Not(in = j1Andj2, out = nj1Andj2);
    Not(in = j1Andj3, out = nj1Andj3);
    Not(in = j2Andj3, out = nj2Andj3);
    And(a = nj1Andj2, b = instruction[0], out = nj1Andj2Andj3);
    And(a = nj1Andj3, b = instruction[1], out = nj1Andj3Andj2);
    And(a = nj2Andj3, b = instruction[2], out = nj2Andj3Andj1);
    And(a = nzr, b = nng, out = nzrAndnng);
    And(a = zero, b = nng, out = zrAndnng);
    And(a = nzr, b = negative, out = nzrAndng);
    And(a = nj1Andj2Andj3, b = nzrAndnng, out = out1);
    And(a = nj1Andj3Andj2, b = zrAndnng, out = out2);
    And(a = nj2Andj3Andj1, b = nzrAndng, out = out3);
    And(a = j1Andj2, b = instruction[0], out = j1Andj2Andj3);
    Or(a = out1, b = out2, out = tempOut1);
    Or(a = out3, b = j1Andj2Andj3, out = tempOut2);
    Or(a = tempOut1, b = tempOut2, out = loadPCtemp);
    And(a = loadPCtemp, b = instruction[15], out = loadPC);
    PC(in = outAPC, load = loadPC, inc = true, reset = reset, 
       out = outPC, out[0..14] = pc);
}